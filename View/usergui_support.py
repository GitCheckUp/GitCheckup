#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 6.0.1
#  in conjunction with Tcl version 8.6
#    Jan 07, 2021 03:15:03 PM EET  platform: Windows NT
import os
import sys
sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

from Controller.controller import Controller
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True


"""
def display(self, string):
    print(string)
    self.scrolledtext1.insert(END, "This is text to be inserted")


def display_errors(self, errorDetections, totalErrorCount):
    print("Analysis complete.")
    print("Found %d errors or poor practices." % totalErrorCount)

    for detection in errorDetections:
        print("-------------------------------")
        print("Found %d issues of type %s of category %s:\n" % (len(detection.errorList), detection.name, detection.category))

        for error in detection.errorList:
            print("User: %s made an error%s at: %s on commit sha: %s with message: %s" % (error.user.name, error.extra_info, error.commit.date, error.commit.sha, error.commit.message))
"""






def set_Tk_var():
    global gui_repo
    gui_repo = tk.StringVar()


def print_into_window(window,text):
    window.insert('end',text)
    sys.stdout.flush()




"""
class gui:
    def __init__(self):
        self.window= 
        pass

    def display(self, string):
        print(string)

    def display_welcome(self):
        print("Welcome to GitCheckup!")

    def display_input_repoAddress(self):
        print("Please enter repository address: ")

    def display_error_repoAddress(self):
        print("Could not read repository address, please enter a valid address.")

    def display_error_repoMissing(self):
        print("Could not find a valid repository with this address. Please ensure there are no typos and the repository is public.")

    def display_analyzing(self, repoName):
        print("Analyzing repo: %s ...\n" % repoName)

    def display_errors(self, errorDetections, totalErrorCount):
        print("Analysis complete.")
        print("Found %d errors or poor practices." % totalErrorCount)

        for detection in errorDetections:
            print("-------------------------------")
            print("Found %d issues of type %s of category %s:\n" % (len(detection.errorList), detection.name, detection.category))

            for error in detection.errorList:
                print("User: %s made an error%s at: %s on commit sha: %s with message: %s" % (error.user.name, error.extra_info, error.commit.date, error.commit.sha, error.commit.message))

"""

def analyze_button(x):

    #obj = Controller.analyze_repo()

    obj = "sometext"
    x.insert('end',obj)
    print_into_window(x,obj)
    sys.stdout.flush()





def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    from View import usergui
    usergui.vp_start_gui()






